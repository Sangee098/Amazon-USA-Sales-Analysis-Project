1.Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.

SELECT p.product_name,
COUNT(o.order_id) AS total_quantity,
SUM(oi.quantity*oi.price_per_unit) AS total_sales
FROM order_items oi
JOIN product p
ON oi.product_id = p.product_id
JOIN orders o
ON oi.order_id =o.order_id
GROUP BY p.product_name
ORDER BY total_sales DESC
LIMIT 10;


2.Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.

ALTER TABLE order_items
ADD COLUMN total_sales_product float;

UPDATE order_items
SET total_sales_product=price_per_unit*quantity;

WITH total AS 
(
SELECT c.category_name AS category_name, SUM(oi.total_sales_product) AS category_profit
FROM category c
JOIN product p
ON p.category_id=c.category_id
JOIN order_items oi
ON oi.product_id = p.product_id
GROUP BY c.category_name
),
gross_total AS(
SELECT SUM(category_profit) AS gross FROM total
)
SELECT t.category_name, (t.category_profit/gt.gross)*100 AS category FROM total t
CROSS JOIN gross_total gt;


3.Compute the average order value for each customer.Challenge: Include only customers with more than 5 orders

SELECT c.customer_id,CONCAT(first_name,' ',last_name) as Customer_name,SUM(oi.total_sales)/COUNT(o.order_id) AS order_average
FROM customer c
JOIN orders o
ON c.customer_id=o.customer_id
JOIN order_items oi
ON 	o.order_id=oi.order_id
GROUP BY c.customer_id,Customer_name


4.Monthly Sales Trend. Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!

with sales_details AS 
(SELECT extract(month from o.order_date) AS Month,
EXTRACT(YEAR FROM o.order_date) AS year, 
round(SUM(oi.total_sales)::numeric,2) AS total_Sales
FROM orders o
JOIN order_items oi
ON o.order_id = oi.order_id
WHERE o.order_date> (SELECT MAX(order_date)- INTERVAL '1 YEAR' FROM orders)
GROUP BY 1,2
ORDER BY year,month), 
previous AS
(
SELECT year,Month,total_Sales AS current_month_sales,LAG(total_Sales) over(order by year,Month) as previous_month_Sales
FROM sales_details
)
SELECT year,Month,current_month_sales,previous_month_Sales, 
((current_month_sales-previous_month_Sales)/previous_month_Sales)*100 AS percentage_increase
FROM previous;

5.Customers with No Purchases. Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration

WITH CTE AS 
(
SELECT cus.state as state,
c.category_name as category_name, 
sum(oi.total_sales) AS total_Sales
FROM customer cus
JOIN orders o
ON cus.customer_id=o.customer_id
JOIN order_items oi
ON o.order_id=oi.order_id
JOIN product p
ON oi.product_id=p.product_id
JOIN category c
ON p.category_id=c.category_id
GROUP BY cus.state,c.category_name),
ordered AS(
SELECT state, category_name,total_Sales,RANK() OVER (PARTITION by state order by total_sales ASC) as rank FROM CTE
ORDER BY state)
SELECT state, category_name,total_Sales FROM ordered
WHERE rank=1;

6.Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.

SELECT c.customer_id, sum(oi.total_Sales) AS CLTV, DENSE_RANK() OVER(ORDER BY sum(oi.total_Sales) DESC) AS customer_rank
FROM customer c
JOIN orders o
ON c.customer_id =o.order_id
JOIN order_items oi
ON oi.order_id=o.order_id
GROUP BY c.customer_id
ORDER BY CLTV DESC;

7.Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information

SELECT warehouse_id, product_id,last_stock_Date,sum(stock) as stock_amount
FROM inventory
GROUP BY warehouse_id, product_id,last_stock_Date
HAVING sum(stock)<10;


8.Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.

SELECT o.order_id,s.shipping_date-o.order_date as days
FROM orders o
JOIN shipping s
ON o.order_id=s.order_id
WHERE (s.shipping_date-o.order_date)>3;


